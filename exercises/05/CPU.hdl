// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Mux A Register
    Not(in=instruction[15] , out=notIn15 );
	Mux16(a=ALUout1 , b=instruction , sel=notIn15 , out=Mux1out );

    //A Register and addressM
    Or(a=instruction[5] , b=notIn15 , out=Aload );
    Register(in=Mux1out , load=Aload , out=Aout, out[0..14]=addressM );

    //Mux ALU
    And(a=instruction[12] , b=instruction[15] , out=Mux2load );
    Mux16(a=Aout , b=inM , sel=Mux2load , out=inputY );

    //D Register
    And(a=instruction[4] , b=instruction[15] , out=Dload );
    Register(in=ALUout1 , load=Dload , out=inputX );

    //ALU
    ALU(x=inputX , y=inputY , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=outM, out=ALUout1 , zr=zr , ng=ng );

    //WriteM
    And(a=instruction[3] , b=instruction[15] , out=writeM );

    //Program Counter
    Not(in=ng , out=notNg );
    Not(in=zr , out=notZr );

    And(a=instruction[2] , b=ng , out=in2ANDng );
    And(a=in2ANDng , b=notZr , out=x );
    
    And(a=instruction[1] , b=notNg , out=in1ANDnotNg );
    And(a=in1ANDnotNg , b=zr , out=y );

    And(a=instruction[0] , b=notNg , out=in0ANDnotNg );
    And(a=in0ANDnotNg , b=notZr , out=z );

    Or(a=x , b=y , out=xORy );
    Or(a=xORy , b=z , out=xyz );

    And(a=xyz , b=instruction[15] , out=PCload );

    PC(in=Aout , load=PCload , inc=true , reset=reset , out[0..14]=pc );

}